{"name": "发送一条新建的频道消息（应用8）", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_144', '消息中心应用消息', '发送消息', '发送一条新建的频道消息（应用8）', '/v1/message/send', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "4e4d2199-8924-4763-ab36-ba0120440805-attachment.txt", "type": "text/plain"}], "start": 1622542450336, "stop": 1622542450337}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "cd904303-e7f6-4b00-a259-f8a496a7ff4c-attachment.txt", "type": "text/plain"}], "start": 1622542450337, "stop": 1622542450337}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "9d3a9261-7938-400c-9668-88f747975de2-attachment.txt", "type": "text/plain"}], "start": 1622542450341, "stop": 1622542450342}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "4638a936-dd62-4dab-9f5b-4b46dabae439-attachment.txt", "type": "text/plain"}], "start": 1622542450342, "stop": 1622542450342}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "d366b622-a385-450f-b949-8b4311a54e7d-attachment.txt", "type": "text/plain"}], "start": 1622542450442, "stop": 1622542450442}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "572e42c4-e188-45d7-9210-6f0890a89d97-attachment.txt", "type": "text/plain"}], "start": 1622542450443, "stop": 1622542450443}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "fa5d7aad-00c7-450d-af24-087e4fb2e270-attachment.txt", "type": "text/plain"}], "start": 1622542450443, "stop": 1622542450448}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "d640b342-0a86-4f46-9029-ce1856252cf4-attachment.txt", "type": "text/plain"}], "start": 1622542450449, "stop": 1622542450449}], "parameters": [{"name": "cases", "value": "['case_144', '消息中心应用消息', '发送消息', '发送一条新建的频道消息（应用8）', '/v1/message/send', '', 'post', 'json', '', '{\\n \"appid\": \"&$.test_023..datas[11].app_id&\",\\n \"access_token\": \"&$.case_100.access_token&\",\\n \"to_users\": [\"&$.test_010..datas[0].uid&\", \"&$.test_011..datas[0].uid&\", \"&$.test_004..datas[0].uid&\", \"&$.test_005..datas[0].uid&\"],\\n \"type\": \"text\",\\n \"message\": {\\n  \"content\": \"测试这个频道消息\"\\n },\\n \"msg_status\": \"1\"\\n}', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542450336, "stop": 1622542450449, "uuid": "954ffba9-e4a4-4089-89e0-9bb35b9bf20f", "historyId": "7226eb3bc46e3960c959a4d1e4f6b45b", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}