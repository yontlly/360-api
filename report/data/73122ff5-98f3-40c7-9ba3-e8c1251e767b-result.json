{"name": "应用6加入统一代办", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_217', '统一代办', '加入统一代办', '应用6加入统一代办', '/v1/todo/join?access_token=&$.case_100.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "59925bae-25d0-484b-aa7e-b2594b370040-attachment.txt", "type": "text/plain"}], "start": 1622542475971, "stop": 1622542475972}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "6c2c83ab-3a3a-4dc3-8f13-b83b8b91319c-attachment.txt", "type": "text/plain"}], "start": 1622542475972, "stop": 1622542475972}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "9f3b237c-d39e-4a94-86d9-9effe29eda2f-attachment.txt", "type": "text/plain"}], "start": 1622542475976, "stop": 1622542475977}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "5eb836ee-7573-48c0-ae58-f3740e217585-attachment.txt", "type": "text/plain"}], "start": 1622542475977, "stop": 1622542475977}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "eb8cf94f-d372-425e-8a01-84788d15db8a-attachment.txt", "type": "text/plain"}], "start": 1622542476074, "stop": 1622542476074}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "d2c6f138-04aa-4b6a-b53f-7f21432657e1-attachment.txt", "type": "text/plain"}], "start": 1622542476074, "stop": 1622542476075}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "20d3c1bf-563d-4632-bf66-1b2a86a4f2ba-attachment.txt", "type": "text/plain"}], "start": 1622542476075, "stop": 1622542476081}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "de1622fe-fc0b-45ec-8118-250b0f451cfc-attachment.txt", "type": "text/plain"}], "start": 1622542476081, "stop": 1622542476081}], "parameters": [{"name": "cases", "value": "['case_217', '统一代办', '加入统一代办', '应用6加入统一代办', '/v1/todo/join?access_token=&$.case_100.access_token&', '', 'post', 'json', '', '{ \"appid\":\"&$.test_023..datas[9].app_id&\" }', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542475971, "stop": 1622542476081, "uuid": "58c9fa62-f068-4814-ae6e-5852d591bab3", "historyId": "1a850116d82ee41881625f883588e747", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}