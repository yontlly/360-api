{"name": "根据新创建的刘程旭自动化测试获取8888的token", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:不合法的corpid或corpsecret || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '200002', 'errmsg': '不合法的corpid或corpsecret'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_100', '登陆', '获取开放平台新组织token', '根据新创建的刘程旭自动化测试获取8888的token', '/v1/gettoken', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '200002', 'errmsg': '不合法的corpid或corpsecret'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:不合法的corpid或corpsecret || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "8305fe59-0e65-417d-ba41-8a97bee8e3ae-attachment.txt", "type": "text/plain"}], "start": 1622542444200, "stop": 1622542444201}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "933e3fa0-5706-4a5e-9170-dd48ea40992f-attachment.txt", "type": "text/plain"}], "start": 1622542444201, "stop": 1622542444201}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "de6efc3d-01dd-4078-b079-27d3cb8233ec-attachment.txt", "type": "text/plain"}], "start": 1622542444202, "stop": 1622542444202}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "7ad8a013-567e-423c-a30d-8386f0496963-attachment.txt", "type": "text/plain"}], "start": 1622542444202, "stop": 1622542444202}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "5be7eab3-daa8-4d93-a485-51be5bdb65ed-attachment.txt", "type": "text/plain"}], "start": 1622542444368, "stop": 1622542444368}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "9830c93a-2aad-4277-ad26-94c7267d1cd5-attachment.txt", "type": "text/plain"}], "start": 1622542444368, "stop": 1622542444369}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "c3f69fde-2a30-415b-a536-443f738f030d-attachment.txt", "type": "text/plain"}], "start": 1622542444369, "stop": 1622542444374}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "d63357ab-197a-462b-9959-6859a9b70d34-attachment.txt", "type": "text/plain"}], "start": 1622542444374, "stop": 1622542444375}], "parameters": [{"name": "cases", "value": "['case_100', '登陆', '获取开放平台新组织token', '根据新创建的刘程旭自动化测试获取8888的token', '/v1/gettoken', '', 'get', 'params', '', '{\\n \"corpid\": \"&$.test_002..datas[0].cid&\",\\n \"corpsecret\":\"&$.pwd_099..datas.corpsecret&\"\\n}', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542444200, "stop": 1622542444375, "uuid": "22a10957-a362-4446-984f-bc1840b3ab11", "historyId": "e09235db78f8a450e7591086d32c3420", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}