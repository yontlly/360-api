{"name": "查询业务事件回调接口-应用5", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 该应用未注册", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"该应用未注册\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_152', '公众号模块', '查询业务事件回调接口', '查询业务事件回调接口-应用5', '/v1/event/type_list?access_token=&$.case_100.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"该应用未注册\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 该应用未注册\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "2d497c95-f034-4e1c-9016-c495a7a9e0c4-attachment.txt", "type": "text/plain"}], "start": 1622542451306, "stop": 1622542451307}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "4413a6a1-ffe0-45ce-b194-293c6817881c-attachment.txt", "type": "text/plain"}], "start": 1622542451307, "stop": 1622542451307}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "635f209d-3567-4042-9ecb-f10efd890132-attachment.txt", "type": "text/plain"}], "start": 1622542451310, "stop": 1622542451310}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "8a7cda6f-1fa0-4d50-9d05-642512ba248f-attachment.txt", "type": "text/plain"}], "start": 1622542451310, "stop": 1622542451310}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "662a699c-5c0e-476a-afd3-d1c778780c5c-attachment.txt", "type": "text/plain"}], "start": 1622542451411, "stop": 1622542451412}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "fe4aaa72-4ea6-4c70-b7db-7389e8ab316c-attachment.txt", "type": "text/plain"}], "start": 1622542451412, "stop": 1622542451412}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "bf3793b4-19f7-4cda-a4a7-a2c9dc719bf9-attachment.txt", "type": "text/plain"}], "start": 1622542451413, "stop": 1622542451420}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "2679ab4b-e5d4-40fd-bd89-5f81314fbf83-attachment.txt", "type": "text/plain"}], "start": 1622542451420, "stop": 1622542451420}], "parameters": [{"name": "cases", "value": "['case_152', '公众号模块', '查询业务事件回调接口', '查询业务事件回调接口-应用5', '/v1/event/type_list?access_token=&$.case_100.access_token&', '', 'get', 'params', '', '{ \"appid\": \"&$.test_023..datas[8].app_id&\"}', '', '', '{\"$.errmsg\":\"该应用未注册\"}']"}], "start": 1622542451305, "stop": 1622542451420, "uuid": "0f19df85-6b1d-49c2-97f1-01a37f47ae78", "historyId": "696effab5a17676b3b2e751e317e8ed4", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}