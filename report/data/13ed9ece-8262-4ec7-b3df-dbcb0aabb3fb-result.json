{"name": "创建部门可交互式部门3-成员3", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_124', '可交互消息-complexpicker准备数据', '为可交互式消息 - complexpicker\\n准备测试成员', '创建部门可交互式部门3-成员3', '/v1/user/create?access_token=&$.case_100.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "33f440c9-25c2-42eb-ab05-b3b4e8d39704-attachment.txt", "type": "text/plain"}], "start": 1622542447385, "stop": 1622542447386}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "8ab09a23-b76c-4ae6-98e2-3a8c7131b72b-attachment.txt", "type": "text/plain"}], "start": 1622542447386, "stop": 1622542447386}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "078eb7fd-597b-4e0f-942c-ce83a14b862e-attachment.txt", "type": "text/plain"}], "start": 1622542447386, "stop": 1622542447387}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "05557d1a-0f62-4374-9eec-d891feabde03-attachment.txt", "type": "text/plain"}], "start": 1622542447387, "stop": 1622542447387}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "122783cf-ffbc-46b2-b913-12b237dd0ad0-attachment.txt", "type": "text/plain"}], "start": 1622542447491, "stop": 1622542447491}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "dc6139ea-64a1-456e-ac3f-d4776272b58a-attachment.txt", "type": "text/plain"}], "start": 1622542447491, "stop": 1622542447492}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "f7a99c37-9196-4417-9a94-e24cdfe8797a-attachment.txt", "type": "text/plain"}], "start": 1622542447492, "stop": 1622542447496}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "f8f761c2-bcd0-46f4-8c06-1c36f5b51d32-attachment.txt", "type": "text/plain"}], "start": 1622542447497, "stop": 1622542447497}], "parameters": [{"name": "cases", "value": "['case_124', '可交互消息-complexpicker准备数据', '为可交互式消息 - complexpicker\\n准备测试成员', '创建部门可交互式部门3-成员3', '/v1/user/create?access_token=&$.case_100.access_token&', '', 'post', 'json', '', '{\\n    \"name\": \"可交互式部门3-成员3\",\\n    \"department\": [\\n        {\\n            \"did\": \"&$.case_115.did&\",\\n            \"order\": \"2\",\\n            \"posName\": \"ceo\"\\n        }\\n    ],\\n    \"gender\": \"1\",\\n    \"sign\": \"可交互式部门3-成员3\",\\n    \"enName\": \"lucky\",\\n    \"tel\": \"0215553222\",\\n    \"mobile\": \"15000000000\"\\n}', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542447385, "stop": 1622542447497, "uuid": "22df95a7-7506-46b3-acea-d2373107aafa", "historyId": "fece8e72ee15075f5d9db0b531ed2b26", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}