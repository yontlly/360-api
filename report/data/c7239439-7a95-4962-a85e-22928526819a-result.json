{"name": "发送语音", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_103', '消息中心应用消息', '发送消息', '发送语音', '/v1/message/send', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "7f5635e1-f31f-4027-a369-3f5309f73d9e-attachment.txt", "type": "text/plain"}], "start": 1622542444638, "stop": 1622542444638}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "b5922f08-0806-4625-9f75-9f6ff694e7cb-attachment.txt", "type": "text/plain"}], "start": 1622542444638, "stop": 1622542444638}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "675c02a9-3519-4027-9d2d-9d07d59ebfc9-attachment.txt", "type": "text/plain"}], "start": 1622542444642, "stop": 1622542444642}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "0e129604-ab30-4183-9bfc-c8776f8253ca-attachment.txt", "type": "text/plain"}], "start": 1622542444642, "stop": 1622542444643}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "90a32a9b-6a86-4cb9-8d80-c857f2875bea-attachment.txt", "type": "text/plain"}], "start": 1622542444746, "stop": 1622542444747}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "9369d4fe-141f-4fea-bb31-1454e72cdbd4-attachment.txt", "type": "text/plain"}], "start": 1622542444747, "stop": 1622542444747}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "f3dd0296-a645-40f3-ac84-2baeb699a080-attachment.txt", "type": "text/plain"}], "start": 1622542444748, "stop": 1622542444754}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "19ace3af-e053-4d31-a1e9-5602d69c238f-attachment.txt", "type": "text/plain"}], "start": 1622542444754, "stop": 1622542444754}], "parameters": [{"name": "cases", "value": "['case_103', '消息中心应用消息', '发送消息', '发送语音', '/v1/message/send', '', 'post', 'json', '', '{\\n \"appid\": \"&$.test_023..datas[8].app_id&\",\\n \"access_token\": \"&$.case_100.access_token&\",\\n \"to_users\": [\"&$.test_010..datas[0].uid&\", \"&$.test_011..datas[0].uid&\", \"&$.test_004..datas[0].uid&\", \"&$.test_005..datas[0].uid&\"],\\n \"type\": \"audio\",\\n \"message\": {\\n  \"media_id\":\"&$.case_023.media_id&\",\\n  \"duration\": 10\\n },\\n \"msg_status\": \"1\"\\n}', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542444637, "stop": 1622542444755, "uuid": "f0e01985-09c3-4eb4-8fbd-d23335477add", "historyId": "567bbcf0b86c22c3b26dbdff47754ed9", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}