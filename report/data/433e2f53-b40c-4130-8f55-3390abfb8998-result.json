{"name": "更改密码", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1622542437', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['pwd_003', '账号', '账号密码修改', '更改密码', '/im/user/resetPwd', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1622542437', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "0b199443-2c46-4246-ae07-5be5207d5268-attachment.txt", "type": "text/plain"}], "start": 1622542437205, "stop": 1622542437205}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "84fb9ce9-85c9-4377-b36c-443346cfd9b3-attachment.txt", "type": "text/plain"}], "start": 1622542437205, "stop": 1622542437205}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "995c62d4-9b56-4e51-a9b0-d805932ae302-attachment.txt", "type": "text/plain"}], "start": 1622542437207, "stop": 1622542437207}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "2891fb98-d425-496a-a309-2532dac150ba-attachment.txt", "type": "text/plain"}], "start": 1622542437208, "stop": 1622542437208}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "1c2eca7f-2bb3-4cac-9bac-84771f494db7-attachment.txt", "type": "text/plain"}], "start": 1622542437277, "stop": 1622542437278}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "2961195e-6b0b-497a-89b3-fe4ada67a8f1-attachment.txt", "type": "text/plain"}], "start": 1622542437278, "stop": 1622542437278}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "eec26bcf-c6d9-4a57-9e8a-e1869f11c149-attachment.txt", "type": "text/plain"}], "start": 1622542437279, "stop": 1622542437283}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "573365a8-b1e0-4e47-b10c-c3351666e684-attachment.txt", "type": "text/plain"}], "start": 1622542437283, "stop": 1622542437284}], "parameters": [{"name": "cases", "value": "['pwd_003', '账号', '账号密码修改', '更改密码', '/im/user/resetPwd', '', 'post', 'json', '', '{\\n    \"trans_id\":\"&$.pwd_001.trans_id&\",\\n    \"access_token\":\"&$.pwd_001.access_token&\",\\n    \"uid\":\"&$.pwd_001.uid&\",\\n    \"cid\":\"&$.pwd_001.cids[0]&\",\\n    \"client_ver\":\"5.0.0\",\\n    \"dev_type\":\"5\",\\n    \"user_info\":\\n        {\\n            \"uid\":\"&$.pwd_001.uid&\",\\n            \"cid\":\"&$.pwd_001.cids[0]&\",\\n            \"new_password\":\"Liu123123\",\\n            \"old_password\":\"1bbd886460827015e5d605ed44252251\"\\n        },\\n    \"reset_type\":\"3\"\\n}', '', '{\\n    \"trans_id\": \"F392DC72E322477F9C8DCCC967C46F2C\",\\n    \"err_code\": \"0\",\\n    \"err_msg\": \"成功\",\\n    \"timestamp\": \"1611632574\",\\n    \"time_cost\": \"0.544\"\\n}', '{\"$.err_msg\":\"成功\"}']"}], "start": 1622542437205, "stop": 1622542437284, "uuid": "12d15b95-e40c-4f45-a0f0-57c8afc4cc58", "historyId": "7d37f1adcea2e4bbdcecbfba043e7063", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}