{"name": "修改日程-简单日程2-修改仅参与人可见", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_182', '日程接口', '修改日程', '修改日程-简单日程2-修改仅参与人可见', '/v1/reminder/update?access_token=&$.case_100.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "79c1932b-0518-49f2-b758-4717644ad2a5-attachment.txt", "type": "text/plain"}], "start": 1622542453164, "stop": 1622542453165}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "c6136267-1be6-4781-8abc-72829fa1395e-attachment.txt", "type": "text/plain"}], "start": 1622542453165, "stop": 1622542453166}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "95852337-e5b9-48c9-9a10-0ba2f7e3245f-attachment.txt", "type": "text/plain"}], "start": 1622542453166, "stop": 1622542453167}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "6cebf993-993c-416a-9c66-f06aa6f0b5d2-attachment.txt", "type": "text/plain"}], "start": 1622542453167, "stop": 1622542453167}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "e58f0495-eba4-468f-ac2b-27d737d445e0-attachment.txt", "type": "text/plain"}], "start": 1622542453266, "stop": 1622542453267}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "1f5e06f3-576c-4382-a194-32b6e2c47b27-attachment.txt", "type": "text/plain"}], "start": 1622542453267, "stop": 1622542453267}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "e037da07-fc7f-4c01-9577-230934ba7c2a-attachment.txt", "type": "text/plain"}], "start": 1622542453268, "stop": 1622542453273}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "147f9a32-85f2-4b41-a2cf-c297949d2dbb-attachment.txt", "type": "text/plain"}], "start": 1622542453273, "stop": 1622542453274}], "parameters": [{"name": "cases", "value": "['case_182', '日程接口', '修改日程', '修改日程-简单日程2-修改仅参与人可见', '/v1/reminder/update?access_token=&$.case_100.access_token&', '', 'post', 'json', '', '{\\n    \"datas\":{\\n        \"rid\":\"&$.case_173..datas.rid&\",\\n        \"account\":\"pytest_test1\",\\n        \"title\":\"修改日程-简单日程2-修改仅参与人可见\",\\n        \"repeat\":\"5\",\\n        \"privacy\":\"0\",\\n        \"remark\":\"修改日程-简单日程2-修改仅参与人可见\"\\n    }\\n}', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542453163, "stop": 1622542453274, "uuid": "6ab7d4b7-c2c1-43c0-b10b-5b79e0732f70", "historyId": "a00186b51654e8858c5ff30caeb83a21", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}