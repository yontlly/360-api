{"name": "删除公众号", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_161', '公众号模块', '公众号', '删除公众号', '/v1/offcialaccount/delete?access_token=&$.case_100.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "4d54626a-a440-4405-b167-cf37fc14f0a4-attachment.txt", "type": "text/plain"}], "start": 1622542452407, "stop": 1622542452407}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "a7b56ce5-99c0-43e0-b076-4b57c724b886-attachment.txt", "type": "text/plain"}], "start": 1622542452408, "stop": 1622542452408}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "0eea8f16-257f-4470-bda1-663fe625faab-attachment.txt", "type": "text/plain"}], "start": 1622542452412, "stop": 1622542452413}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "dbe5c74e-18a7-474e-a819-27139995feba-attachment.txt", "type": "text/plain"}], "start": 1622542452413, "stop": 1622542452414}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "65f5eefd-9e5a-46e5-839d-50014e4580fa-attachment.txt", "type": "text/plain"}], "start": 1622542452513, "stop": 1622542452513}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "59e860f9-f968-4af9-ad80-6ea1a43614a6-attachment.txt", "type": "text/plain"}], "start": 1622542452513, "stop": 1622542452514}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "f96ad0a1-8233-4514-9aa4-adee712122ca-attachment.txt", "type": "text/plain"}], "start": 1622542452514, "stop": 1622542452519}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "b12ca9e7-6d2c-4041-b71f-9df8f2be6556-attachment.txt", "type": "text/plain"}], "start": 1622542452519, "stop": 1622542452520}], "parameters": [{"name": "cases", "value": "['case_161', '公众号模块', '公众号', '删除公众号', '/v1/offcialaccount/delete?access_token=&$.case_100.access_token&', '', 'post', 'json', '', '{ \"appid\":\"&$.test_023..datas[8].app_id&\", \"officalmsgid\":\"&$.case_160.officalmsgid&\" }', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542452406, "stop": 1622542452520, "uuid": "594af282-500e-41a4-ae2d-0aee0d6cbd63", "historyId": "02b9083c3a8ed92aecd3d7547a71e712", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}