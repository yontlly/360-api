{"name": "获取CorpSecret", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1622542444', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['pwd_099', '前置', '前置', '获取CorpSecret', '/corpmanage/setting', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1622542444', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "90d7b77d-78ba-4a4b-bc8a-93b3346e9b78-attachment.txt", "type": "text/plain"}], "start": 1622542444107, "stop": 1622542444107}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "32c37b54-332b-4c3f-be23-f907fb6195f2-attachment.txt", "type": "text/plain"}], "start": 1622542444107, "stop": 1622542444107}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "536b88ae-e714-4507-a6a9-20210ebb6bd1-attachment.txt", "type": "text/plain"}], "start": 1622542444108, "stop": 1622542444109}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "d5f5eb10-74ca-4024-893f-ef284a14d8a0-attachment.txt", "type": "text/plain"}], "start": 1622542444109, "stop": 1622542444109}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "c9ec641a-9d83-44be-9043-a6716e15fd25-attachment.txt", "type": "text/plain"}], "start": 1622542444184, "stop": 1622542444184}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "63d1ca91-3f30-4937-b91a-ba7f833d4a2e-attachment.txt", "type": "text/plain"}], "start": 1622542444184, "stop": 1622542444185}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "00712efe-c3ee-4d58-8b86-0688f3288483-attachment.txt", "type": "text/plain"}], "start": 1622542444185, "stop": 1622542444190}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "db99a1ba-28be-4c7b-b52b-bfaf3673e846-attachment.txt", "type": "text/plain"}], "start": 1622542444190, "stop": 1622542444191}], "parameters": [{"name": "cases", "value": "['pwd_099', '前置', '前置', '获取CorpSecret', '/corpmanage/setting', '', 'post', 'json', '', '{\\n    \"trans_id\": \"&$.test_002.trans_id&\",\\n    \"access_token\":\"&$.test_041..datas[0].access_token&\",\\n    \"cid\":\"&$.test_002..datas[0].cid&\",\\n    \"client_ver\":\"3.1.0\",\\n    \"dev_type\":\"7\",\\n    \"operator_uid\":\"eval`&$.test_002..datas[0].cid&+1`\"\\n}', '', '{\\n    \"trans_id\": \"368DA8139BE34B61906A06EFB2EBA3BB\",\\n    \"err_code\": \"0\",\\n    \"err_msg\": \"成功\",\\n    \"timestamp\": \"1611718702\",\\n    \"time_cost\": \"0.287\",\\n    \"datas\": {\\n        \"corpid\": \"1917616998511031\",\\n        \"corpsecret\": \"3qpMd014NmGxJXom0w07PoKbFJZzUeWq\"\\n    }\\n}', '{\"$.err_msg\":\"成功\"}']"}], "start": 1622542444107, "stop": 1622542444191, "uuid": "b96a65af-3ea0-4454-9a93-e8728dd605c3", "historyId": "831ac6ad3635af5db2f396b9a9fa1fe5", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}