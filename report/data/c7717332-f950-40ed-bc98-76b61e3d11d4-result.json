{"name": "删除部门 - 群里有人无法删除", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:成功 || 预期结果: 部门下有子部门或成员", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '0', 'errmsg': '成功'}\nexpect_str = '{\"$.errmsg\":\"部门下有子部门或成员\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_047', '通讯录管理', '部门管理', '删除部门 - 群里有人无法删除', '/v1/dept/delete?access_token=&$.case_001.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '0', 'errmsg': '成功'}\nexpect_str = '{\"$.errmsg\":\"部门下有子部门或成员\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:成功 || 预期结果: 部门下有子部门或成员\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "d1707426-2667-455e-8b1a-fe142459999e-attachment.txt", "type": "text/plain"}], "start": 1622542331878, "stop": 1622542331878}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "57298d6f-e3d2-4341-9bdf-9589321345ea-attachment.txt", "type": "text/plain"}], "start": 1622542331878, "stop": 1622542331878}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "03cdcd85-b273-499e-981c-b4ef08802bbd-attachment.txt", "type": "text/plain"}], "start": 1622542331878, "stop": 1622542331879}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "459fa70e-2b87-475a-9889-109955ade3c3-attachment.txt", "type": "text/plain"}], "start": 1622542331879, "stop": 1622542331879}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "093c16e9-2cad-4544-8de1-3be172ad311d-attachment.txt", "type": "text/plain"}], "start": 1622542332308, "stop": 1622542332309}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "ad084d66-8536-4279-8a2a-dd00fac61502-attachment.txt", "type": "text/plain"}], "start": 1622542332309, "stop": 1622542332309}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "e94ae9ab-6bbd-48e7-a959-0804655a6928-attachment.txt", "type": "text/plain"}], "start": 1622542332310, "stop": 1622542332311}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "541e3273-6b7a-48ba-a258-16d572ec3f2c-attachment.txt", "type": "text/plain"}], "start": 1622542332312, "stop": 1622542332312}], "parameters": [{"name": "cases", "value": "['case_047', '通讯录管理', '部门管理', '删除部门 - 群里有人无法删除', '/v1/dept/delete?access_token=&$.case_001.access_token&', '', 'get', 'params', '', '{\\n \"did\": \"&$.case_009.did&\"\\n}', '', '', '{\"$.errmsg\":\"部门下有子部门或成员\"}']"}], "start": 1622542331877, "stop": 1622542332312, "uuid": "9b651426-6961-43a2-aa6e-3ee46042913f", "historyId": "168792e0bbbdf39e8ea15fcf540987e4", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}