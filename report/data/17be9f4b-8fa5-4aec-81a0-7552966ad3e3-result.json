{"name": "应用属性配置", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_220', '统一代办', '应用属性配置', '应用属性配置', '/v1/app/config/set?access_token=&$.case_100.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "97fdf79a-47f1-493e-9ca7-b9cec3299cab-attachment.txt", "type": "text/plain"}], "start": 1622542476331, "stop": 1622542476331}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "89d502a3-dc66-4d0a-bb66-26dd6c13d6dd-attachment.txt", "type": "text/plain"}], "start": 1622542476331, "stop": 1622542476331}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "86b4f7ba-5b1f-453b-b959-982334aaed86-attachment.txt", "type": "text/plain"}], "start": 1622542476334, "stop": 1622542476335}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "c138250f-fc7f-4b70-ae69-ed0719d290e3-attachment.txt", "type": "text/plain"}], "start": 1622542476335, "stop": 1622542476335}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "d9f9fff5-24ea-4ec4-b580-42bfe5496bbe-attachment.txt", "type": "text/plain"}], "start": 1622542476432, "stop": 1622542476433}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "6640bddf-7cfe-4728-8649-bc37a1289dbb-attachment.txt", "type": "text/plain"}], "start": 1622542476433, "stop": 1622542476433}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "ddf929e3-9d8e-4f1b-904e-ed9c7fd5d0db-attachment.txt", "type": "text/plain"}], "start": 1622542476433, "stop": 1622542476439}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "d4600ac7-843e-44f8-936d-6337718c3851-attachment.txt", "type": "text/plain"}], "start": 1622542476440, "stop": 1622542476440}], "parameters": [{"name": "cases", "value": "['case_220', '统一代办', '应用属性配置', '应用属性配置', '/v1/app/config/set?access_token=&$.case_100.access_token&', '', 'post', 'json', '', '{\\n    \"appid\":\"&$.test_023..datas[9].app_id&\",\\n     \"config\":[\\n        {\\n            \"key\":\"1\",\\n            \"val\":\"待办\",\\n            \"type\":\"1\"\\n        },\\n        {\\n            \"key\":\"2\",\\n            \"val\":\"已办\",\\n            \"type\":\"0\"\\n        },\\n        {\\n            \"key\":\"3\",\\n            \"val\":\"待阅\",\\n            \"type\":\"1\"\\n        },\\n        {\\n            \"key\":\"4\",\\n            \"val\":\"已阅\",\\n            \"type\":\"0\"\\n        },\\n        {\\n            \"key\":\"5\",\\n            \"val\":\"流程完结\",\\n            \"type\":\"0\"\\n        }\\n    ]\\n}', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542476330, "stop": 1622542476440, "uuid": "a841604f-3516-4a63-ac44-7315c2a020de", "historyId": "e0dc44b5012e3d2b54e428a76a0e4c72", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}