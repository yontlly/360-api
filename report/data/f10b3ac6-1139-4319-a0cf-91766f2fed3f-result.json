{"name": "修改日程-简单日程2-重要改成不重要", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_183', '日程接口', '修改日程', '修改日程-简单日程2-重要改成不重要', '/v1/reminder/update?access_token=&$.case_100.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "61f03758-82b0-4446-9c9d-3039c2c18500-attachment.txt", "type": "text/plain"}], "start": 1622542453284, "stop": 1622542453284}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "095274b7-60ef-4b0e-af1a-f8a1d820caa3-attachment.txt", "type": "text/plain"}], "start": 1622542453284, "stop": 1622542453285}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "e8fa8c5a-b444-401b-a051-15e87911e4f5-attachment.txt", "type": "text/plain"}], "start": 1622542453285, "stop": 1622542453286}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "23159029-1c20-491c-b20d-4f0923249394-attachment.txt", "type": "text/plain"}], "start": 1622542453286, "stop": 1622542453287}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "8fa1d63a-3995-4ca6-84ac-191649c62c19-attachment.txt", "type": "text/plain"}], "start": 1622542453387, "stop": 1622542453387}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "a70b60c1-56a8-412a-b7db-aff28216971b-attachment.txt", "type": "text/plain"}], "start": 1622542453387, "stop": 1622542453388}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "53bbd492-4742-4002-867d-fe20e17b380b-attachment.txt", "type": "text/plain"}], "start": 1622542453388, "stop": 1622542453394}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "fe4fa279-e096-4cae-9d68-20735d313274-attachment.txt", "type": "text/plain"}], "start": 1622542453394, "stop": 1622542453394}], "parameters": [{"name": "cases", "value": "['case_183', '日程接口', '修改日程', '修改日程-简单日程2-重要改成不重要', '/v1/reminder/update?access_token=&$.case_100.access_token&', '', 'post', 'json', '', '{\\n    \"datas\":{\\n        \"rid\":\"&$.case_174..datas.rid&\",\\n        \"account\":\"pytest_test1\",\\n        \"title\":\"修改日程-简单日程2-重要改成不重要\",\\n        \"repeat\":\"5\",\\n        \"level\":\"0\",\\n        \"remark\":\"修改日程-简单日程2-重要改成不重要\"\\n    }\\n}', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542453283, "stop": 1622542453395, "uuid": "2b77dca3-a4dc-4285-8a71-b9d0b95c2e20", "historyId": "8088f3b978498a6247a28dd5efb32e13", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}