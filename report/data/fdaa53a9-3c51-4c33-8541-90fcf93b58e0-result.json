{"name": "发送文件-word", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_105', '消息中心应用消息', '发送消息', '发送文件-word', '/v1/message/send', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "b45a9b95-2b7e-4951-ac82-3cec85b30be7-attachment.txt", "type": "text/plain"}], "start": 1622542444891, "stop": 1622542444891}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "e73bc925-dd03-44a1-84b3-f948f8e800ce-attachment.txt", "type": "text/plain"}], "start": 1622542444891, "stop": 1622542444892}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "cbaed398-b7fe-448f-b0bb-c1765920be0f-attachment.txt", "type": "text/plain"}], "start": 1622542444896, "stop": 1622542444896}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "b9dffcdc-4097-480c-a410-8fc482835a29-attachment.txt", "type": "text/plain"}], "start": 1622542444896, "stop": 1622542444896}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "13c631a8-30b2-4efa-a5ff-ef36de34f6ca-attachment.txt", "type": "text/plain"}], "start": 1622542445024, "stop": 1622542445025}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "118f6fc1-2ddb-4e16-98cc-995c18b78d70-attachment.txt", "type": "text/plain"}], "start": 1622542445025, "stop": 1622542445025}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "0a9149d6-9125-4698-8aec-bc258806899a-attachment.txt", "type": "text/plain"}], "start": 1622542445026, "stop": 1622542445031}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "1545b2f5-45fe-4566-b015-413ef07a938a-attachment.txt", "type": "text/plain"}], "start": 1622542445032, "stop": 1622542445033}], "parameters": [{"name": "cases", "value": "['case_105', '消息中心应用消息', '发送消息', '发送文件-word', '/v1/message/send', '', 'post', 'json', '', '{\\n \"appid\": \"&$.test_023..datas[8].app_id&\",\\n \"access_token\": \"&$.case_100.access_token&\",\\n \"to_users\": [\"&$.test_010..datas[0].uid&\", \"&$.test_011..datas[0].uid&\", \"&$.test_004..datas[0].uid&\", \"&$.test_005..datas[0].uid&\"],\\n \"type\": \"file\",\\n \"message\": {\\n  \"media_id\":\"&$.case_026.media_id&\"\\n },\\n \"msg_status\": \"1\"\\n}', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542444891, "stop": 1622542445033, "uuid": "5370636d-8f69-4fb3-a4d7-52c2f834d930", "historyId": "991c474dc23257402f3a81b81c67db1a", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}