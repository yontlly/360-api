{"name": "创建组织-必填缺失", "status": "broken", "statusDetails": {"message": "  File \"<string>\", line 0\n    \nSyntaxError: unexpected EOF while parsing", "trace": "dict_str = ''\n\n    def convert_json(dict_str: str) -> dict:\n        \"\"\"\n        :param dict_str: 长得像字典的字符串\n        return json格式的内容\n        \"\"\"\n        try:\n            if 'None' in dict_str:\n                dict_str = dict_str.replace('None', 'null')\n            elif 'True' in dict_str:\n                dict_str = dict_str.replace('True', 'true')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('False', 'false')\n>           dict_str = json.loads(dict_str)\n\ntools/__init__.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '', cls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f9f3015dc40>, s = ''\n_w = <built-in method match of re.Pattern object at 0x7f9f5029a570>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f9f3015dc40>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_007', '通讯录管理', '组织管理', '创建组织-必填缺失', '/v1/corp/createcorp?access_token=&$.case_003.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntools/data_process.py:109: in assert_result\n    expect_dict = convert_json(expect_str)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndict_str = ''\n\n    def convert_json(dict_str: str) -> dict:\n        \"\"\"\n        :param dict_str: 长得像字典的字符串\n        return json格式的内容\n        \"\"\"\n        try:\n            if 'None' in dict_str:\n                dict_str = dict_str.replace('None', 'null')\n            elif 'True' in dict_str:\n                dict_str = dict_str.replace('True', 'true')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('False', 'false')\n            dict_str = json.loads(dict_str)\n        except Exception as e:\n            if 'null' in dict_str:\n                dict_str = dict_str.replace('null', 'None')\n            elif 'true' in dict_str:\n                dict_str = dict_str.replace('true', 'True')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('false', 'False')\n>           dict_str = eval(dict_str)\nE             File \"<string>\", line 0\nE               \nE           SyntaxError: unexpected EOF while parsing\n\ntools/__init__.py:97: SyntaxError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "fae9cf9c-2fad-465d-a368-88d5edfff80f-attachment.txt", "type": "text/plain"}], "start": 1622542317831, "stop": 1622542317832}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "2ae265d8-aeba-4559-8a4d-6ad9f91ebe9f-attachment.txt", "type": "text/plain"}], "start": 1622542317833, "stop": 1622542317833}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "2a3e37f5-1328-4e45-bfbf-cc106d33ecad-attachment.txt", "type": "text/plain"}], "start": 1622542317833, "stop": 1622542317834}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "34c98a1b-988e-432e-b676-dc5958f627a1-attachment.txt", "type": "text/plain"}], "start": 1622542317834, "stop": 1622542317834}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "6a9b0665-f864-4188-a7f8-56876e4c633f-attachment.txt", "type": "text/plain"}], "start": 1622542318211, "stop": 1622542318212}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "32d66b77-9853-4418-8a77-44a6a2af03cf-attachment.txt", "type": "text/plain"}], "start": 1622542318212, "stop": 1622542318212}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "98cf5ae9-3287-41f1-a3d3-3193e28de8e0-attachment.txt", "type": "text/plain"}], "start": 1622542318212, "stop": 1622542318213}], "parameters": [{"name": "cases", "value": "['case_007', '通讯录管理', '组织管理', '创建组织-必填缺失', '/v1/corp/createcorp?access_token=&$.case_003.access_token&', '', 'post', 'data', '', '{\\n \"admin_name\": \"admin\",\\n \"corp_name\": \"pytest\"\\n}', '', '', '']"}], "start": 1622542317831, "stop": 1622542318213, "uuid": "e7c8aa7d-6d67-4cc0-b6ed-dfab94a0f3d8", "historyId": "94c53f645702c06e17118fd92e09f479", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}