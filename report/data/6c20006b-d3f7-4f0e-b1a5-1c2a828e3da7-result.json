{"name": "发送公众号接口 - attachments,content", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_156', '公众号模块', '公众号', '发送公众号接口 - attachments,content', '/v1/offcialaccount/send?access_token=&$.case_100.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "f4d626a3-a313-45a0-b648-74f098f514bd-attachment.txt", "type": "text/plain"}], "start": 1622542451811, "stop": 1622542451811}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "f26bb679-da80-49d7-bf0b-b776aa0d558c-attachment.txt", "type": "text/plain"}], "start": 1622542451811, "stop": 1622542451811}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "49cb834a-64fb-474d-98e1-d6573d835307-attachment.txt", "type": "text/plain"}], "start": 1622542451815, "stop": 1622542451815}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "04646ba2-1664-4fef-9506-a6d965adc236-attachment.txt", "type": "text/plain"}], "start": 1622542451815, "stop": 1622542451815}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "afd70f6d-7195-444e-b8e5-ad722083841b-attachment.txt", "type": "text/plain"}], "start": 1622542451914, "stop": 1622542451915}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "c57956fb-724f-40cf-8693-f8326af5fd7c-attachment.txt", "type": "text/plain"}], "start": 1622542451915, "stop": 1622542451915}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "a02805f6-7628-403f-964f-9375855e5f13-attachment.txt", "type": "text/plain"}], "start": 1622542451916, "stop": 1622542451922}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "8da85545-e3d8-42e9-b8f8-4d86f2a98949-attachment.txt", "type": "text/plain"}], "start": 1622542451922, "stop": 1622542451922}], "parameters": [{"name": "cases", "value": "['case_156', '公众号模块', '公众号', '发送公众号接口 - attachments,content', '/v1/offcialaccount/send?access_token=&$.case_100.access_token&', '', 'post', 'json', '', '{\\n    \"appid\": \"&$.test_023..datas[8].app_id&\",\\n    \"subject\": \"发送公众号-带附件,正文\",\\n    \"subtitle\": \"发送公众号-带附件,正文\",\\n    \"cover\": \"&$.case_022.media_id&\",\\n    \"content\":\"这里只是发送公众号的测试内容\",\\n    \"attachments\":[\"&$.case_025.media_id&\",\"&$.case_026.media_id&\"]\\n}', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542451810, "stop": 1622542451922, "uuid": "ac377afb-0ce6-492a-8e35-fbbcf8a9d772", "historyId": "d055eb983250c480e1d3742d2218a2f0", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}