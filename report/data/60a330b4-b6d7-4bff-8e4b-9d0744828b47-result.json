{"name": "修改日程-简单日程2-设置为团队日程", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_186', '日程接口', '修改日程', '修改日程-简单日程2-设置为团队日程', '/v1/reminder/update?access_token=&$.case_100.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "c6fd35d2-35cd-408b-bf3b-801a67f02d17-attachment.txt", "type": "text/plain"}], "start": 1622542453646, "stop": 1622542453647}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "4fd94635-c6db-49de-a768-b2c02c0f633c-attachment.txt", "type": "text/plain"}], "start": 1622542453647, "stop": 1622542453647}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "90511327-d062-4411-942c-9b83cdf86a68-attachment.txt", "type": "text/plain"}], "start": 1622542453647, "stop": 1622542453648}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "f69602eb-ae2c-4575-a079-da065db84d50-attachment.txt", "type": "text/plain"}], "start": 1622542453648, "stop": 1622542453648}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "13ebfd75-b9de-4c73-b409-0c8f7f40f3a9-attachment.txt", "type": "text/plain"}], "start": 1622542453751, "stop": 1622542453752}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "16651967-6ef5-4314-b7f8-e6964b24b64e-attachment.txt", "type": "text/plain"}], "start": 1622542453752, "stop": 1622542453752}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "d4e13b14-94cd-4291-b4fd-e7d19144eff1-attachment.txt", "type": "text/plain"}], "start": 1622542453752, "stop": 1622542453757}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "539dc98e-0cb0-4f94-b2f3-eb40564419f0-attachment.txt", "type": "text/plain"}], "start": 1622542453758, "stop": 1622542453758}], "parameters": [{"name": "cases", "value": "['case_186', '日程接口', '修改日程', '修改日程-简单日程2-设置为团队日程', '/v1/reminder/update?access_token=&$.case_100.access_token&', '', 'post', 'json', '', '{\\n    \"datas\":{\\n        \"rid\":\"&$.case_177..datas.rid&\",\\n        \"account\":\"pytest_test1\",\\n        \"title\":\"修改日程-简单日程2-设置为团队日程\",\\n        \"repeat\":\"5\",\\n        \"reminder_time\": \"4800\",\\n        \"reminder_who\": \"2\",\\n        \"team\":\"1\",\\n        \"uids\":[{\"account\":\"pytest_test2\"},{\"account\":\"pytest_test3\"},{\"account\":\"pytest_test4\"},{\"account\":\"pytest_test5\"}],\\n        \"remark\":\"修改日程-简单日程2-设置为团队日程\"\\n    }\\n}', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542453646, "stop": 1622542453758, "uuid": "28c56ec6-36e4-4230-9777-5f2428d95d49", "historyId": "cd9db179617e6161710f1986c7c04675", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}