{"name": "创建日程-简单日程", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:None || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_162', '日程接口', '创建日程', '创建日程-简单日程', '/v1/reminder/create?access_token=&$.case_100.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:None || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "ac141b54-6d8d-4627-9a8d-4c2b9055fa1b-attachment.txt", "type": "text/plain"}], "start": 1622542452545, "stop": 1622542452546}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "27913f44-821d-4c7b-b10e-f5eaa0b934cc-attachment.txt", "type": "text/plain"}], "start": 1622542452546, "stop": 1622542452546}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "dbf41260-c4b9-4bd1-8ee0-807ebbe67ba9-attachment.txt", "type": "text/plain"}], "start": 1622542452546, "stop": 1622542452546}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "89e70bee-7a48-43ce-9a1d-25893bbf10ff-attachment.txt", "type": "text/plain"}], "start": 1622542452546, "stop": 1622542452547}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "0adc73b4-dd25-4e3c-8d50-5090361aae14-attachment.txt", "type": "text/plain"}], "start": 1622542452646, "stop": 1622542452646}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "c93a5b89-5e33-4607-bb1d-9c7ba5ad7079-attachment.txt", "type": "text/plain"}], "start": 1622542452646, "stop": 1622542452647}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "8dcf38b3-0963-4f9c-ba35-b75698552c89-attachment.txt", "type": "text/plain"}], "start": 1622542452647, "stop": 1622542452654}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "1bfbf201-0132-47e9-ac8a-2c7103f325ca-attachment.txt", "type": "text/plain"}], "start": 1622542452654, "stop": 1622542452655}], "parameters": [{"name": "cases", "value": "['case_162', '日程接口', '创建日程', '创建日程-简单日程', '/v1/reminder/create?access_token=&$.case_100.access_token&', '', 'post', 'json', '', '{\\n    \"datas\":{\\n        \"creator_cid\":\"&$.test_002..datas[0].cid&\",\\n        \"account\":\"pytest_test1\",\\n        \"title\":\"创建日程-简单日程\",\\n        \"start_time\": \"s_time\",\\n        \"end_time\": \"e_time\",\\n        \"client_id\":\"UUID\"\\n    }\\n}', '', '{\\n    \"err_code\": \"0\",\\n    \"err_msg\": \"成功\",\\n    \"datas\": {\\n        \"_id\": \"604a0296ee9eac4890285e45\",\\n        \"rid\": \"276\",\\n        \"cid\": \"1917616998534709\",\\n        \"title\": \"创建日程-简单日程\",\\n        \"startTime\": \"1615516241\",\\n        \"endTime\": \"1615606246\",\\n        \"fullDay\": \"0\",\\n        \"level\": \"1\",\\n        \"reminderTime\": \"900\",\\n        \"reminderWho\": \"0\",\\n        \"repeat\": \"0\",\\n        \"uids\": [],\\n        \"creatorCid\": \"1917616998534709\",\\n        \"creatorUid\": \"1917616998534711\",\\n        \"creatorName\": \"pytest_test1\",\\n        \"remark\": \"\",\\n        \"action\": \"0\",\\n        \"clientId\": \"1f40734a-825f-11eb-a032-acde48001122\",\\n        \"confirm\": \"0\",\\n        \"team\": \"0\",\\n        \"privacy\": \"0\",\\n        \"created\": \"1615463062\",\\n        \"updated\": \"1615463062\",\\n        \"reminderUc\": \"1\",\\n        \"address\": \"\",\\n        \"attachments\": [],\\n        \"data_no_landing\": \"0\",\\n        \"preview_water_mark\": \"0\",\\n        \"errCode\": \"0\",\\n        \"noAuthorityUidList\": [],\\n        \"userUc\": \"1\"\\n    }\\n}', '{\"$.err_msg\":\"成功\"}']"}], "start": 1622542452545, "stop": 1622542452655, "uuid": "d3607d6a-5b6f-46b5-b5b0-975f54fd4a61", "historyId": "685b93daa68662e123f1b398a5d585a4", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}