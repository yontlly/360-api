{"name": "删除日程", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_190', '日程接口', '删除日程', '删除日程', '/v1/reminder/remove?access_token=&$.case_100.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "2d76c3b7-001f-4da3-8d58-65736e5562d2-attachment.txt", "type": "text/plain"}], "start": 1622542454134, "stop": 1622542454135}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "db51a8a7-4b24-4008-947a-e781c01a15e6-attachment.txt", "type": "text/plain"}], "start": 1622542454135, "stop": 1622542454135}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "1a40035f-ed31-46c8-940d-f6f3f41602e9-attachment.txt", "type": "text/plain"}], "start": 1622542454136, "stop": 1622542454136}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "7e13d9b2-6a8b-478f-8b8a-528009ded858-attachment.txt", "type": "text/plain"}], "start": 1622542454136, "stop": 1622542454136}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "d4c39864-b256-4231-8098-92eaa343ee6d-attachment.txt", "type": "text/plain"}], "start": 1622542454237, "stop": 1622542454237}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "a4145af9-087d-4f60-9dc2-a5ce4fbd373e-attachment.txt", "type": "text/plain"}], "start": 1622542454237, "stop": 1622542454237}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "c943e16d-ec62-4775-903f-fa6cc1b940ba-attachment.txt", "type": "text/plain"}], "start": 1622542454238, "stop": 1622542454243}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "fab73f58-bf50-4e46-857b-14f18692a78d-attachment.txt", "type": "text/plain"}], "start": 1622542454244, "stop": 1622542454244}], "parameters": [{"name": "cases", "value": "['case_190', '日程接口', '删除日程', '删除日程', '/v1/reminder/remove?access_token=&$.case_100.access_token&', '', 'post', 'json', '', '{ \"rids\":[\"&$.case_171..datas.rid&\"]}', '', '{\\n    \"errcode\": \"0\",\\n    \"errmsg\": \"成功\",\\n    \"datas\": [\\n        {\\n            \"rid\": \"294\",\\n            \"errCode\": \"0\",\\n            \"errMsg\": \"成功\",\\n            \"reminderUc\": \"3\"\\n        }\\n    ]\\n}', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542454134, "stop": 1622542454244, "uuid": "4c9e8eb4-c1ab-4fb2-bcfa-99e0792457a1", "historyId": "8ab384c7d07bec6aebb335ffcebe1578", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}