{"name": "查看一个频道绑定多个app的情况", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_141', '消息频道管理', '查询目前消息频道和应用', '查看一个频道绑定多个app的情况', '/v1/app/channel/list?access_token=&$.case_100.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100003', 'errmsg': '获取access_token失败，或者access_token无效'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:获取access_token失败，或者access_token无效 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "bbad3f35-6ba3-4755-9df8-932e95cfe272-attachment.txt", "type": "text/plain"}], "start": 1622542449994, "stop": 1622542449994}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "0b8cf017-c75f-454d-997a-618f241792dd-attachment.txt", "type": "text/plain"}], "start": 1622542449994, "stop": 1622542449994}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "05fd84d9-196f-44ec-8529-2e2deffaa80e-attachment.txt", "type": "text/plain"}], "start": 1622542449994, "stop": 1622542449995}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "7f249f7a-7c2c-410d-9bcb-87c6224943ca-attachment.txt", "type": "text/plain"}], "start": 1622542449995, "stop": 1622542449995}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "2c681cdf-05af-4721-a475-8ae8719c0081-attachment.txt", "type": "text/plain"}], "start": 1622542450094, "stop": 1622542450094}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "81bd3cc8-c35a-46d9-a0c0-8c58f48e7046-attachment.txt", "type": "text/plain"}], "start": 1622542450095, "stop": 1622542450095}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "7464edc5-df82-4347-8225-ac68e2f41715-attachment.txt", "type": "text/plain"}], "start": 1622542450095, "stop": 1622542450102}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "b55b485f-e03a-4e71-8f20-dcc2c6f5a158-attachment.txt", "type": "text/plain"}], "start": 1622542450103, "stop": 1622542450103}], "parameters": [{"name": "cases", "value": "['case_141', '消息频道管理', '查询目前消息频道和应用', '查看一个频道绑定多个app的情况', '/v1/app/channel/list?access_token=&$.case_100.access_token&', '', 'get', 'params', '', '', '', '{\\n    \"errcode\": \"0\",\\n    \"errmsg\": \"成功\",\\n    \"datas\": [\\n        {\\n            \"logo_url\": \"http://10.206.83.102:8989/uploads/image/20210127/d3/d31318766f555357662bde133cbf5c11.jpeg\",\\n            \"logo_media_id\": \"603f1fd2ee9eac06be3eef08\",\\n            \"name\": \"修改后的频道1\",\\n            \"desc\": \"修改后的频道1-描述\",\\n            \"channelid\": \"1917616998533573\",\\n            \"apps\": []\\n        },\\n        {\\n            \"logo_url\": \"http://10.206.83.102:8989/uploads/image/20210127/d3/d31318766f555357662bde133cbf5c11.jpeg\",\\n            \"logo_media_id\": \"603f1fd2ee9eac06be3eef08\",\\n            \"name\": \"新建消息频道-2\",\\n            \"desc\": \"消息频道2-描述\",\\n            \"channelid\": \"1917616998533574\",\\n            \"apps\": [\\n                {\\n                    \"logo_url\": \"\",\\n                    \"logo_media_id\": \"\",\\n                    \"name\": \"应用5-全选\",\\n                    \"desc\": \"应用5-全选\",\\n                    \"app_config\": [],\\n                    \"appid\": \"1917616998533553\"\\n                },\\n                {\\n                    \"logo_url\": \"\",\\n                    \"logo_media_id\": \"\",\\n                    \"name\": \"应用7-私密全选\",\\n                    \"desc\": \"应用7-私密全选\",\\n                    \"app_config\": [],\\n                    \"appid\": \"1917616998533555\"\\n                },\\n                {\\n                    \"logo_url\": \"\",\\n                    \"logo_media_id\": \"\",\\n                    \"name\": \"应用8-私密-py5\",\\n                    \"desc\": \"发布范围私密 -py5\",\\n                    \"app_config\": [],\\n                    \"appid\": \"1917616998533556\"\\n                },\\n                {\\n                    \"logo_url\": \"\",\\n                    \"logo_media_id\": \"\",\\n                    \"name\": \"应用9-推送可交互\",\\n                    \"desc\": \"应用9-推送可交互\",\\n                    \"app_config\": [],\\n                    \"appid\": \"1917616998533557\"\\n                }\\n            ]\\n        }\\n    ]\\n}', '{\"$.errmsg\":\"成功\"}']"}], "start": 1622542449993, "stop": 1622542450103, "uuid": "6c279dc7-feb9-4179-8d0d-5064fd93018e", "historyId": "7efd419479403ddf41b092a19175414a", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "19614-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}